import re
import os
import json

class ExploitDatabase(object):
    def __init__(self, edb_path, exploit_path):
        self.edb_path = edb_path
        self.exploit_path = exploit_path
        self.exploits = {}
        if not os.path.exists(self.exploit_path):
            os.makedirs(self.exploit_path)

        self.exploit_file_names = [f for f in os.listdir(self.exploit_path) \
                    if os.path.isfile(os.path.join(self.exploit_path, f)) \
                    and os.path.join(self.exploit_path, f).endswith(".json")]

        for exploit_file_name in self.exploit_file_names:
            self.read(os.path.join(self.exploit_path, exploit_file_name))

    def refresh_exploits_with_cves(self):
        pattern_string = 'CVE-\d{4}-\d{1,7}'
        pattern = re.compile(pattern_string)
        for root, dirnames, filenames in os.walk(self.edb_path):
            for filename in filenames:
                edb_file = open(os.path.join(root, filename), "r")
                content = edb_file.read()
                matches = pattern.findall(content, re.MULTILINE)
                edbid = os.path.splitext(filename)[0]
                if len(matches) > 0:
                    self.exploits[edbid] = dict(filename=edb_file.name)
                    if 'cves' not in self.exploits[edbid].keys():
                        self.exploits[edbid]['cves'] = dict()
                    for cveid in matches:
                        if cveid not in self.exploits[edbid]['cves'].keys():
                            self.exploits[edbid]['cves'][cveid] = dict()
                    self.write(edbid)

    def write(self, edbid):
        file_name = self.exploit_path + '/' + edbid + '.json'
        with open(file_name, 'w') as exploit_file:
            json.dump(self.exploits[edbid], exploit_file)

    def read(self, file_name):
        with open(file_name, 'r') as exploit_file:
            root = os.path.splitext(file_name)[0]
            edbid = root.replace(self.exploit_path + "/", "")
            self.exploits[edbid] = json.load(exploit_file)

    def affects_el(self, edbid):
        for cveid in self.exploits[edbid]['cves'].keys():
            try:
                if self.exploits[edbid]['cves'][cveid]['rhapi']:
                    return True
            except KeyError:
                pass
        return False

    def score(self, edbid, kind, score):
        if 'scores' not in self.exploits[edbid].keys():
            self.exploits[edbid]['scores'] = dict()
        if kind not in self.exploits[edbid]['scores'].keys():
            self.exploits[edbid]['scores'][kind] = dict()

        self.exploits[edbid]['scores'][kind] = score

    def get_exploit_strings(self, edbid):
        strings = []
        if len(self.exploits[edbid]['scores']) == 0:
            string = edbid
            string += ","
            string += self.exploits[edbid]['filename']
            return string

        for score_kind in self.exploits[edbid]['scores'].keys():
            string = edbid
            string += ","
            string += self.exploits[edbid]['filename']
            string += ","
            string += score_kind
            string += ','
            string += self.exploits[edbid]['scores'][score_kind]
            strings.append(string)
            
        return strings
