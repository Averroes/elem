import os
import re


from resource import UrlResourceManager
from resource import GitResourceManager
from resource import MANAGER_GIT
from resource import FileListing
import logging

class ExploitManager(object):
    def __init__(self, name, url, data_location, file_listing, config_option='url', tlsverify=True):
        self.config_option = config_option
        self.manager_path = os.path.join(data_location, name)
        data_location = os.path.join(data_location, name)
        self.data = dict()
        cve_pattern_string = 'CVE-\d{4}-\d{1,}'
        self.cve_pattern = re.compile(cve_pattern_string)
        self.file_listing = FileListing(data_location, file_listing)
        self.filtered_listing = self.file_listing.filter_listing(['windows', 
                                                                 'bsd', 
                                                                 'ios', 
                                                                 'osx', 
                                                                 'solaris',
                                                                 'asp',
                                                                 'hardware'])

        self.with_cves = 0
        self.logger = logging.getLogger('elem')

        if config_option is 'url':
            self.manager = UrlResourceManager(name, 
                                              url, 
                                              data_location, 
                                              file_listing, 
                                              tlsverify)
        elif config_option is 'git':
            self.manager = GitResourceManager(name, 
                                              url, 
                                              data_location, 
                                              file_listing, 
                                              tlsverify)

    def get_data(self):
       self.manager.get_data()

    def name(self):
        return self.manager.name

    def load_data(self):
        self.with_cves = 0
        if self.manager.kind is MANAGER_GIT:
            for eid in self.filtered_listing:
                file_path = os.path.join(self.manager_path, 
                                         self.filtered_listing[eid]['file'])
                with open(file_path, 'r') as exploit_file:
                    content = exploit_file.read()
                    matches = self.cve_pattern.findall(content, re.MULTILINE)
                    if len(list(set(matches))) > 0:
                        self.with_cves += 1
                        if eid not in self.data.keys():
                            self.data[eid] = dict(cves=[], source=self.name())
                        for cveid in list(set(matches)):
                            self.data[eid]['cves'].append(cveid)

    def eids(self):
        return self.data.keys()
    
    def kind(self):
        return self.manager.kind

    def total_listing(self):
        return len(self.file_listing.listing)

    def total_relevant(self):
        return len(self.file_listing.filter_listing(['windows', 
                                                        'bsd', 
                                                        'ios', 
                                                        'osx', 
                                                        'solaris',
                                                        'asp',
                                                        'hardware']))
    
    def total_with_cves(self):
        return self.with_cves

    