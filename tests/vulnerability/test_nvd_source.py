import unittest
import os
import mock
import json

from elem.vulnerability import NvdSource
from elem.core import ElemResource

class TestNvdSourceFromDisk(unittest.TestCase):

    def setUp(self):
        self.test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                                           '..',
                                           'test_data')
        self.test_archive = os.path.join(self.test_data_path, 'nvd', 'small.json.gz')
        self.test_modified_archive = os.path.join(self.test_data_path, 'nvd', 'small-modified.json.gz')
        self.modified_cve_list_file = os.path.join(self.test_data_path, 'nvd', 'modified_cve_list.txt')

    def test_from_disk(self):
        nvd = NvdSource('2016', self.test_archive)
        self.assertEqual(self.test_archive, nvd.location)
        self.assertEqual('2016', nvd.name)
        data = nvd.read()
        self.assertTrue(isinstance(data, dict))


    def test_updates(self):

        nvd = NvdSource('2016',
                        self.test_archive)

        modified_nvd = NvdSource('modified',
                                 self.test_modified_archive)
        modified_data = modified_nvd.read()
        updated_cves = nvd.update_cves(modified_data)

        updated_cves = [cveid.encode('ascii') for cveid in updated_cves]

        self.assertIn('CVE-2014-6271', updated_cves)
        self.assertEqual(len(updated_cves), 1)


class TestNvdSourceFromUrl(unittest.TestCase):

    def setUp(self):
        self.test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                                           '..',
                                           'test_data')
        self.test_archive = 'https://static.nvd.nist.gov/feeds/json/cve/1.0/nvdcve-1.0-2016.json.gz'
        self.mock_data_file = os.path.join(self.test_data_path, 'nvd', 'small.json.gz')
        self.mock_resource = ElemResource(self.mock_data_file)

        self.test_modified_archive = 'https://static.nvd.nist.gov/feeds/json/cve/1.0/nvdcve-1.0-modified.json.gz'
        self.mock_modified_data_file = os.path.join(self.test_data_path, 'nvd', 'small-modified.json.gz')
        self.mock_update_resource = ElemResource(self.mock_modified_data_file)

        self.nvd = NvdSource('2016', self.test_archive)


    @mock.patch('elem.core.util.decode_compressed_content')
    @mock.patch('requests.get')
    def test_from_url(self, mock_url_call, mock_gzip_read):
        mock_gzip_read.return_value = json.dumps(self.mock_resource.read())
        mock_url_call.return_value = mock.MagicMock(status_code=200, 
                                                    headers={'content-type':"application/x-gzip"},
                                                    content=self.mock_resource.read())

        self.assertEqual(self.test_archive, self.nvd.location)
        self.assertEqual('2016', self.nvd.name)
        data = self.nvd.read()
        self.assertTrue(isinstance(data, dict))

    @mock.patch('elem.core.util.decode_compressed_content')
    @mock.patch('requests.get')
    def test_caching(self, mock_url_call, mock_gzip_read):
        mock_gzip_read.return_value = json.dumps(self.mock_resource.read())
        mock_url_call.return_value = mock.MagicMock(status_code=200,
                                                    headers={'content-type':"application/x-gzip"})

        self.nvd.configure_cache(cachepath=os.path.join(self.test_data_path, 'cache', 'small-cache.json.gz'))

        self.assertFalse(os.path.isfile(self.nvd.cache_path()))
        data = self.nvd.read()
        self.assertIsInstance(data, dict)
        data_from_cache = self.nvd.read()
        self.assertIsInstance(data_from_cache, dict)
        self.assertDictEqual(data, data_from_cache)

    @mock.patch('elem.core.util.decode_compressed_content')
    @mock.patch('requests.get')
    def test_detele_cache(self, mock_url_call, mock_gzip_read):

        mock_gzip_read.return_value = json.dumps(self.mock_resource.read())
        mock_url_call.return_value = mock.MagicMock(status_code=200,
                                                    headers={'content-type':"application/x-gzip"})
        self.nvd.configure_cache(cachepath=os.path.join(self.test_data_path, 'cache', 'small-cache.json.gz'))

        self.nvd.read()
        self.assertTrue(os.path.isfile(self.nvd.cache_path()))
        self.nvd.delete_cache()
        self.assertFalse(os.path.isfile(self.nvd.cache_path()))

    @mock.patch('elem.core.util.decode_compressed_content')
    @mock.patch('requests.get')
    def test_updates(self, mock_url_call, mock_gzip_read):
        mock_gzip_read.side_effect = [json.dumps(self.mock_resource.read()),
                                      json.dumps(self.mock_update_resource.read())]
        mock_url_call.side_effect = [mock.MagicMock(status_code=200,
                                                    headers={'content-type':"application/x-gzip"}),
                                     mock.MagicMock(status_code=200,
                                                    headers={'content-type':"application/x-gzip"})
                                    ]

        modified_vdr = NvdSource('modified',
                                 self.test_modified_archive)
        modified_data = modified_vdr.read()
        updated_cves = self.nvd.update_cves(modified_data)

        self.assertIn('CVE-2014-6271', updated_cves)
        self.assertEqual(len(updated_cves), 1)

    @mock.patch('elem.core.util.decode_compressed_content')
    @mock.patch('requests.get')
    def test_cves(self, mock_url_call, mock_gzip_read):
        mock_gzip_data = self.mock_resource.read()
        mock_gzip_read.return_value = json.dumps(mock_gzip_data)
        mock_url_call.return_value = mock.MagicMock(status_code=200, 
                                                    headers={'content-type':"application/x-gzip"})
        vdr = NvdSource('2016',
                        self.test_archive)
        cves_to_test = vdr.cves()
        for cve in cves_to_test:
            self.assertEqual(len(cves_to_test[cve].keys()), 4)
            self.assertIn('published_date', cves_to_test[cve].keys())
            self.assertIn('source_name', cves_to_test[cve].keys())
            self.assertIn('source_type', cves_to_test[cve].keys())
            self.assertIn('configurations', cves_to_test[cve].keys())
            self.assertIsInstance(cves_to_test[cve]['source_type'], int)
            self.assertEqual(cves_to_test[cve]['source_type'], 1)

    def tearDown(self):
        if os.path.isfile(self.nvd.cache_path()):
            os.remove(self.nvd.cache_path())
            