import unittest
import os
from elem.vulnerability import VulnerabilityManager
from elem.vulnerability import NvdSource

class TestVulnerabilityManager(unittest.TestCase):
    def setUp(self):
        self.test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                                           '..',
                                           'test_data')
        self.test_archive = os.path.join(self.test_data_path, 
                                         'nvd', 
                                         'small.json')
        self.test_modified_archive = os.path.join(self.test_data_path, 
                                                  'nvd', 
                                                  'small-modified.json')
        self.vm = VulnerabilityManager()

    def test_init(self):
        self.assertEqual(len(self.vm.readers), 0)
        self.assertEqual(len(self.vm.data), 0)

    def test_add_reader(self):
        self.vm.add_nvd_source('2016', self.test_archive)
        self.assertEqual(len(self.vm.readers), 1)
        self.assertEqual(self.vm.readers['2016'].location, self.test_archive)

    def test_delete_reader(self):
        self.vm.add_nvd_source('2016', self.test_archive)
        self.vm.delete_reader('2016')
        self.assertEqual(len(self.vm.readers), 0)

    def test_delete_nonexistent_reader(self):
        self.vm.add_nvd_source('2016', self.test_archive)
        self.assertEqual(len(self.vm.readers), 1)
        self.vm.delete_reader('2017')
        self.assertEqual(len(self.vm.readers), 1)

    def test_read_data(self):
        self.vm.add_nvd_source('2016', self.test_archive)
        data, refreshed = self.vm.read_data()
        self.assertTrue(isinstance(data, dict))
        self.assertFalse(refreshed)
        self.assertEqual(len(data['2016']['CVE_Items']), 4)


        
        